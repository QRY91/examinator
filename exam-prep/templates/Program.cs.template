using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using {ProjectName}.Data;
using {ProjectName}.Models;
using {ProjectName}.Repositories;
using {ProjectName}.Services;

var builder = WebApplication.CreateBuilder(args);

// === REPOSITORIES (Add your specific repositories here) ===
builder.Services.AddScoped<I{Entity}Repository, {Entity}Repository>();
// Example: builder.Services.AddScoped<IProductRepository, ProductRepository>();

// === SERVICES (Add your business logic services here) ===
builder.Services.AddScoped<IAuthenticationService, AuthenticationService>();
// Example: builder.Services.AddScoped<I{Service}Service, {Service}Service>();

// === CORE MVC SERVICES ===
builder.Services.AddControllersWithViews();
builder.Services.AddHttpContextAccessor();

// === DATABASE & IDENTITY CONFIGURATION ===
builder.Services.AddDbContext<{ProjectName}DbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddIdentity<{CustomUser}, IdentityRole>(options =>
{
    // User configuration
    options.User.AllowedUserNameCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+ ";
    options.User.RequireUniqueEmail = true;

    // Password requirements (adjust for exam/demo purposes)
    options.Password.RequireDigit = false;
    options.Password.RequiredLength = 6;
    options.Password.RequireNonAlphanumeric = false;
    options.Password.RequireUppercase = false;
    options.Password.RequireLowercase = false;

    // Lockout configuration
    options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);
    options.Lockout.MaxFailedAccessAttempts = 5;
    options.Lockout.AllowedForNewUsers = true;

    // Sign-in requirements (simplified for exam)
    options.SignIn.RequireConfirmedAccount = false;
    options.SignIn.RequireConfirmedEmail = false;
    options.SignIn.RequireConfirmedPhoneNumber = false;
})
.AddEntityFrameworkStores<{ProjectName}DbContext>()
.AddDefaultTokenProviders();

// === COOKIE AUTHENTICATION CONFIGURATION ===
builder.Services.ConfigureApplicationCookie(options =>
{
    options.Cookie.HttpOnly = true;
    options.ExpireTimeSpan = TimeSpan.FromMinutes(60);
    options.LoginPath = "/Auth/Login";
    options.LogoutPath = "/Auth/Logout";
    options.AccessDeniedPath = "/Auth/AccessDenied";
    options.SlidingExpiration = true;
});

// === EXTERNAL AUTHENTICATION (Optional - uncomment if needed) ===
/*
builder.Services.AddAuthentication()
    .AddGoogle(options =>
    {
        options.ClientId = builder.Configuration["Authentication:Google:ClientId"];
        options.ClientSecret = builder.Configuration["Authentication:Google:ClientSecret"];
    });
*/

// === ANTI-FORGERY TOKEN ===
builder.Services.AddAntiforgery(options => options.HeaderName = "X-CSRF-TOKEN");

var app = builder.Build();

// === MIDDLEWARE PIPELINE ===
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

// IMPORTANT: Authentication before Authorization
app.UseAuthentication();
app.UseAuthorization();

// === ROUTING CONFIGURATION ===
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

// === DATABASE SEEDING (Optional - create SeedDatabase extension) ===
// app.SeedDatabase();

app.Run();

/* 
=== QUICK SETUP CHECKLIST FOR EXAM ===

1. Replace {ProjectName} with your actual project name
2. Replace {Entity} with your main entities (Product, Order, etc.)
3. Replace {CustomUser} with your user model or use IdentityUser
4. Add specific repositories and services you need
5. Update connection string in appsettings.json
6. Create DbContext class
7. Add-Migration InitialCreate
8. Update-Database

=== COMMON REPOSITORIES TO ADD ===
- IProductRepository, ProductRepository
- IOrderRepository, OrderRepository  
- ICategoryRepository, CategoryRepository
- ICustomerRepository, CustomerRepository

=== COMMON SERVICES TO ADD ===
- IEmailService, EmailService
- IFileUploadService, FileUploadService
- ICartService, CartService
- IPaymentService, PaymentService

=== MINIMAL APPSETTINGS.JSON ===
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database={ProjectName}Db;Trusted_Connection=true;MultipleActiveResultSets=true"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
*/